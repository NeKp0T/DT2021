-- ДЕДЛАЙН НЕДЕЛЯ (до следующей пары)


-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) : Nat => y

\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x

\func second' : (Nat -> Nat -> Nat) => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

-- (f1 f2) `f3` (f4 `f5` f6)
\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (c t f : Bool) : Bool \elim c
  | true => t
  | false => f

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y' => x * (x ^ y')

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x' => (suc x') * fac x'

-- 7. Определите mod и gcd.

\func eq (x y : Nat) : Bool \elim x, y
  | 0, suc _ => false
  | suc _, 0 => false
  | 0, 0 => true
  | suc x', suc y' => eq x' y'

\func if_nat (c : Bool) (t f : Nat) : Nat \elim c
  | true => t
  | false => f

\func mod (x y : Nat) : Nat => mod' x y y
    -- checks from s-1 to zero
    \where
      \func mod' (x y s : Nat) : Nat \elim s
        | 0 => 0
        | suc s' => if_nat (eq' s' x y (suc x)) s' (mod' x y s')
      \func eq' (a b d s : Nat) : Bool \elim s
        | 0 => false
        | suc s' => if (eq a b) true (eq' (a + d) b d s')


\func max (x y : Nat) : Nat => if_nat (x < y) y x
\func min (x y : Nat) : Nat => if_nat (x < y) x y

\func gcd (x y : Nat) => \let
    | mx => max x y
    | mn => min x y
  \in gcd' mx mn mx
    \where
      \func gcd' (x y s : Nat) : Nat \elim s
        | 0 => 0
        | suc s' => gcd' y (mod x y) s'
